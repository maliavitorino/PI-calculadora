{"version":3,"sources":["App.js","index.js"],"names":["App","useState","num1","setNum1","num2","setNum2","operador","setOperador","resultado","setResultado","erroResultado","setErroResultado","a","expr","url","encodeURIComponent","fetch","then","response","json","data","console","log","catch","error","message","Form","inline","FormControl","type","value","label","onChange","event","target","placeholder","as","readOnly","Button","variant","onClick","obtemResultado","Toast","onClose","delay","autohide","className","Header","Body","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAuEeA,MA9Df,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAImBJ,mBAAS,KAJ5B,mBAINK,EAJM,KAIIC,EAJJ,OAKqBN,mBAAS,IAL9B,mBAKNO,EALM,KAKKC,EALL,OAM6BR,mBAAS,MANtC,mBAMNS,EANM,KAMSC,EANT,iDAQb,WAA8BT,EAAKI,EAASF,GAA5C,iBAAAQ,EAAA,6DACQC,EADR,UACkBX,GADlB,OACyBI,GADzB,OACoCF,GAE9BU,EAHN,0CAG+CC,mBAAmB,GAAD,OAAIF,KAHrE,SAIQG,MAAMF,GACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIR,GACZO,QAAQC,IAAIhB,GACZe,QAAQC,IAAIT,GACZQ,QAAQC,IAAIF,GACZX,EAAaW,MAEdG,OAAM,SAAUC,GACfH,QAAQG,MAAR,UAAiBA,EAAMC,UACvBd,GAAiB,MAfvB,4CARa,sBA2Bb,OACE,qCACE,6CACA,eAACe,EAAA,EAAD,CAAMC,QAAM,EAAZ,UACE,cAACC,EAAA,EAAD,CAAaC,KAAK,SAASC,MAAO5B,EAChC6B,MAAM,UACNC,SAAU,SAAAC,GAAK,OAAI9B,EAAQ8B,EAAMC,OAAOJ,QACxCK,YAAY,wBAJhB,OAKA,eAACP,EAAA,EAAD,CAAaQ,GAAG,SAASN,MAAOxB,EAC5ByB,MAAM,WACNC,SAAU,SAAAC,GAAK,OAAI1B,EAAY0B,EAAMC,OAAOJ,QAFhD,UAGI,uCACA,uCACA,uCACA,0CAXJ,OAaA,cAACF,EAAA,EAAD,CAAaC,KAAK,SAASC,MAAO1B,EAC9B2B,MAAM,UACNC,SAAU,SAAAC,GAAK,OAAI5B,EAAQ4B,EAAMC,OAAOJ,QACxCK,YAAY,wBAhBhB,cAiBA,cAACP,EAAA,EAAD,CAAaC,KAAK,SAASQ,UAAQ,EAACP,MAAOtB,OAE3C,cAAC8B,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,kBAjDvB,+CAiD6BC,CAAevC,EAAKI,EAASF,IAAnE,6BAECM,GACC,eAACgC,EAAA,EAAD,CAAOC,QAAS,kBAAMhC,EAAiB,OAAOiC,MAAO,IAAMC,UAAQ,EAACC,UAAU,YAA9E,UACE,cAACJ,EAAA,EAAMK,OAAP,UAAc,wBAAQD,UAAU,UAAlB,oBACd,eAACJ,EAAA,EAAMM,KAAP,CAAYF,UAAU,uBAAtB,sDAAsF,uBAAtF,wDC3DVG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c43c12b.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n//commit\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Toast from 'react-bootstrap/Toast'\nimport './App.css'\n\nfunction App() {\n\n  const [num1, setNum1] = useState('')\n  const [num2, setNum2] = useState('')\n  const [operador, setOperador] = useState('+')\n  const [resultado, setResultado] = useState('')\n  const [erroResultado, setErroResultado] = useState(null)\n\n  async function obtemResultado(num1,operador,num2) {\n    const expr = `${num1}${operador}${num2}` //Expressão = Expr\n    // Para está API o operador precisa estar no formato ERL Encoded por isso usei a função encodeURIComponent()\n    let url = `https://api.mathjs.org/v4/?expr=${encodeURIComponent(`${expr}`)}`\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(url)\n        console.log(operador)\n        console.log(expr)\n        console.log(data)\n        setResultado(data)\n      })\n      .catch(function (error) {\n        console.error(`${error.message}`)\n        setErroResultado(true)\n      })\n  }\n\n  return (\n    <>\n      <h1>Calculadora</h1>\n      <Form inline>\n        <FormControl type=\"number\" value={num1}\n          label=\"Valor 1\"\n          onChange={event => setNum1(event.target.value)}\n          placeholder=\"Digite um número\" />&nbsp; \n      <FormControl as=\"select\" value={operador}\n          label=\"Operador\"\n          onChange={event => setOperador(event.target.value)}>\n          <option>+</option>\n          <option>-</option>\n          <option>*</option>\n          <option>/</option>\n        </FormControl>&nbsp;\n      <FormControl type=\"number\" value={num2}\n          label=\"Valor 2\"\n          onChange={event => setNum2(event.target.value)}\n          placeholder=\"Digite um número\" />&nbsp; = &nbsp;\n      <FormControl type=\"number\" readOnly value={resultado}/>\n      </Form>\n      <Button variant=\"info\" onClick={() => obtemResultado(num1,operador,num2)}>Obter resultado</Button>\n\n      {erroResultado &&\n        <Toast onClose={() => setErroResultado(null)} delay={6000} autohide className=\"bg-danger\">\n          <Toast.Header><strong className=\"mr-auto\">Erro</strong></Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">Por favor verifique os valores digitados!<br>\n          </br>Certifique-se de preencher todos os campos!</Toast.Body>\n        </Toast>\n      }\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}